/* represent N by binary */
/*
    Input:
        N: integer (>=0).
    Output:
        BinVect: vector (length>1),
            BinVect = [b0,..,bn], each bi = 0 or 1,
            and N = b0*2^0 + .. + bn*2^n.
*/
def dec_to_bin (N) {
    /* input need to be positive or 0 */
    if (N < 0) {error("N needs to be more than 0.");} else {}

    /* if input is 0, return 0 */
    if (N == 0) {return vect([0]);} else {}

    /* compute the digit of N and Fact_2 = max{ 2^i | N > 2^i} */
    M = N;
    BinDigit = 1;
    Fact_2 = 1;
    while (1) {
        if (M == Fact_2) {
            /* if N is factoring of 2 */
            BinVect = newvect(BinDigit);
            BinVect[BinDigit-1] = 1;
            return BinVect;
        } else {
            /* if N is NOT factoring of 2 */
            if (M < Fact_2) {
                BinDigit--;
                Fact_2 = Fact_2/2;
                break;
            } else {
                /* repeat */
                BinDigit++;
                Fact_2 = Fact_2*2;
            }
        }
    }

    /* represent N by binary
        by making M and Fact_2 smaller and smaller */
    BinVect = newvect(BinDigit);
    BinVect[BinDigit-1] = 1;
    /* make M more smaller and find the digits which is 1 */
    M = M - Fact_2;
    BinDigit--;
    Fact_2 = Fact_2/2;
    while (M != 0) {
        if (M >= Fact_2) {
            /* if the digits which is 1 */
            BinVect[BinDigit-1] = 1;
            M = M - Fact_2;
        } else {}
        Fact_2 = Fact_2/2;
        BinDigit--;
    }
    return BinVect;
}


/* compute N-th power of A by polynomial time */
/*
    Input:
        A: integer, polynomial
        N: integer (>=0).
    Output:
        E: integer, polynomial
            E = A^N, if both A and N are 0, error.
*/
def fast_exp (A,N) {
    /* input N need to be positive or 0 */
    if (N < 0) {error("input N needs to be more than 0.");} else {}
    /* both input A and N are 0, error */
    if (A == 0 && N == 0) {error("both input A and N are 0.");} else {}

    /* if input N is 0, return 0 */
    if (N == 0) {return 1;} else {}

    /* if input N is 1, return A */
    if (N == 1) {return A;} else {}

    /* Now we represent N to binary */
    BinVect = dec_to_bin(N);

    /* let BinVect be [b0,b1,b2,..,bn],
        compute [A,A^2,A^4,..,A^(2^n)],
        and A^N = b1*A + b2*A^2 +..+ bn*A^n */
    Vec_A = newvect(length(BinVect));
    /* compute A^(2^0) */
    Vec_A[0] = A;
    Exp_A = 1;
    if (BinVect[0] == 1) {Exp_A = Exp_A * Vec_A[0];}
    /* compute A^(2^I) */
    for (I = 1; I < length(Vec_A); I++) {
        Vec_A[I] = Vec_A[I-1]^2;
        if (BinVect[I] == 1) {
            Exp_A = Exp_A * Vec_A[I];
        }
    }
    return Exp_A;
}


/* compute N-th power of A mod R by polynomial time */
/*
    Input:
        A: integer, unipolynomial, multipolynomial
        N: integer (>=0).
        R: integer, unipolynomial, multipolynomial
        Mode: integer (0 or 1 or 2)
            if over Z, Mode = 0,
            if over F[x], Mode = 1,
            if over F[x1,..,xn], Mode = 2.
    Output:
        E: integer, unipolynomial, multipolynomial
            E = (A mod R)^N,
                if both A and N are 0, error.
                if R = 0, error.

*/
def fast_exp_mod (A,N,R,Mode) {
    /* input N need to be positive or 0 */
    if (N < 0) {error("input N needs to be more than 0.");} else {}
    /* both input A and N are 0, error */
    if (A == 0 && N == 0) {error("both input A and N are 0.");} else {}
    /* we need R is NOT 0 */
    if (R == 0) {error("we need that R is NOT 0.");} else {}

    /* if input N is 0, return 0 */
    if (N == 0) {return 1;} else {}

    /*compute B = A mod R */
    if (Mode == 0) {
        B = A % R;
    } else {
        if (Mode == 1) {
            B = urem(A,R);
        } else {
            /* if Mode = 2 */
            B = srem(A,R);
        }
    }

    /* if input N is 1, return A */
    if (N == 1) {
        return B;
    } else {}

    /* Now we represent N to binary */
    BinVect = dec_to_bin(N);

    /* let BinVect be [b0,b1,b2,..,bn],
        compute [A,A^2,A^4,..,A^(2^n)],
        and A^N = b1*A + b2*A^2 +..+ bn*A^n */
    Vec_A = newvect(length(BinVect));
    /* compute A^(2^0) */
    Vec_A[0] = B;
    Exp_A = 1;
    if (BinVect[0] == 1) {Exp_A = Exp_A * Vec_A[0];}
    /* compute A^(2^I) */
    for (I = 1; I < length(Vec_A); I++) {
        Vec_A[I] = Vec_A[I-1]^2;
        /* reduce R */
        if (Mode == 0) {
            Vec_A[I] = Vec_A[I] % R;
        } else {
            if (Mode == 1) {
                Vec_A[I] = urem(Vec_A[I],R);
            } else {
                /* if Mode = 2 */
                Vec_A[I] = srem(Vec_A[I],R);
            }
        }
        if (BinVect[I] == 1) {
            Exp_A = Exp_A * Vec_A[I];
            /* reduce R */
            if (Mode == 0) {
                Exp_A = Exp_A % R;
            } else {
                if (Mode == 1) {
                    Exp_A = urem(Exp_A,R);
                } else {
                    /* if Mode = 2 */
                    Exp_A = srem(Exp_A,R);
                }
            }
        }
    }
    return Exp_A;
}


/* compute N*P,
    P is a point of elliptic curve over finite field(Fq) */
/* non-used */
/*
    Input:
        N: integer,
        P: vector (size: 3) or 0,
            homogeneous coodinates of a point of EC over FF.
        EC: vector (size: 2),
                [a,b] are in Fp and coefficients of elliptic curve,
                i.e., weierstrass form of elliptic curve is y^2=x^3+a*x+b.
    Output:
        Q: vector (size: 3) or 0,
            homogeneous coodinates of N*P.
*/
def ecm_times_ff (N, P, EC) {
    /* Case: N = 0 */
    if (N == 0) {
        return 0;
    } else {}

    /* Case: P = 0 */
    if (P == 0) {
        return 0;
    } else {}

    /* Case: N != 0 and P != 0 */
    /* we can improve on this part by the represent of N */
    if (N > 0) { /* Case: N > 0 */
        R = P;
        M = N;
    } else { /* Case: N < 0 */
        R = ecm_chsgn_ff(P);
        M = -N;
    }
    /* repeat plussing R */
    Q = R;
    for (I = 1; I < M; I++) {
        Q = ecm_add_ff(Q,R,EC);
    }
    return Q;
}


/* compute N*P using the binary represent of N,
    P is a point of elliptic curve over finite field(Fq) */
/* non-used */
/*
    Input:
        N: integer,
        P: vector (size: 3) or 0,
            homogeneous coodinates of a point of EC over FF.
        EC: vector (size: 2),
                [a,b] are in Fp and coefficients of elliptic curve,
                i.e., weierstrass form of elliptic curve is y^2=x^3+a*x+b.
    Output:
        Q: vector (size: 3) or 0,
            homogeneous coodinates of N*P.
*/
def ecm_times_ff_fast (N, P, EC) {
    /* Case: N = 0 */
    if (N == 0) {
        return 0;
    } else {}

    /* Case: P = 0 */
    if (P == 0) {
        return 0;
    } else {}

    /* Case: N != 0 and P != 0 */
    /* we can improve on this part by the represent of N */
    if (N > 0) { /* Case: N > 0 */
        R = P;
        M = N;
    } else { /* Case: N < 0 */
        R = ecm_chsgn_ff(P);
        M = -N;
    }

    /* if input N is 1 or -1, return P or -P */
    if (M == 1) {return R;} else {}

    /* repeat plussing R */
    /* Now we represent M to binary */
    BinVect = dec_to_bin(M);
    /* let BinVect be [b0,b1,b2,..,bn],
        compute [R,2R,4R,..,(2*n)R],
        and M*R = b1*R + b2*2R +..+ bn*(2*n)R */
    Vec_R = newvect(length(BinVect));
    /* compute (2^0)R */
    Vec_R[0] = R;
    Exp_R = 0;
    if (BinVect[0] == 1) {Exp_R = ecm_add_ff(Exp_R,Vec_R[0],EC);}
    /* compute (2^I)R */
    for (I = 1; I < length(Vec_R); I++) {
        Vec_R[I] = ecm_add_ff(Vec_R[I-1],Vec_R[I-1],EC);
        if (BinVect[I] == 1) {
            Exp_R = ecm_add_ff(Exp_R,Vec_R[I],EC);
        }
    }
    return Exp_R;
}


end$